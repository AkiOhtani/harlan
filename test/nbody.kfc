(%testspec
 (%tags xfail))

(module

  (extern nanotime () -> u64)
  
  (define-datatype point3_t
    (point3 float float float))

  ;; The points don't really matter. This will just make a bunch.
  (define (make-points N)
    (kernel ((i (iota N)))
      (point3 (int->float i)
              (int->float i)
              (int->float i))))

  (define (point-diff x y)
    (match x
      ((point3 a b c)
       (match y
         ((point3 d e f)
          (point3 (- a d) (- b e) (- c f)))))))

  (define (point-add x y)
    (match x
      ((point3 a b c)
       (match y
         ((point3 x y z)
          (point3 (+ a x) (+ b y) (+ c z)))))))
  
  (define (point-div a y)
    (match a
      ((point3 a b c)
       (point3 (/ a y) (/ b y) (/ c y)))))

  (define (point-mag p)
    (match p
      ((point3 a b c)
       (sqrt (+ (* a a) (+ (* b b) (* c c)))))))
  
  (define (main)
    (let* ((bodies (make-points 1000))
           (start (nanotime))
           (forces (kernel ((i bodies))
                     (reduce point-add
                       (kernel ((j bodies))
                         (let* ((diff (point-diff i j))
                                (d (point-mag diff)))
                           (point-div diff (* (* d d) d)))))))
           (stop (nanotime)))
      (print "Computed ")
      (print (length forces))
      (print " forces in ")
      (print (/ (- stop start) 1000))
      (println "ms"))
    (return 0))
  
  )
