;; -*- scheme -*-

;; Dense matrix-matrix product

(module
  (define (main)
      (let A (vector
              (vector 1 0 0 0)
              (vector 0 1 0 0)
              (vector 0 0 1 0)
              (vector 0 0 0 1)))
      (let B (vector
              (vector 1 0 0 0)
              (vector 0 1 0 0)
              (vector 0 0 1 0)
              (vector 0 0 0 1)))
      (let Bt (kernel ((j (iota 4)))
                      (kernel ((i (iota 4)))
                              (vector-ref (vector-ref B (var j)) (var i)))))
      (let C (kernel ((row (var A)))
               (kernel ((col (var Bt)))
                 (reduce +
                   (kernel ((x (var row)) (y (var col)))
                     (* (var x) (var y)))))))
      ;;(assert (= (var C) (var A)))
      (for (i 0 (length C))
           (for (j 0 (length (vector-ref C 0)))
                (assert (= (vector-ref (vector-ref C i) j)
                           (vector-ref (vector-ref A i) j)))))
      (return 0)))
