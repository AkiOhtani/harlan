;; -*- scheme -*-
;; xfail
;; Dense dot product between two vectors.

(module
  (extern nanotime () -> u64)
  (extern print_int_u64 (int u64) -> void)
  
  (fn main ()
      (let iters 1)
      (for (i 1 101)
           (let len (* i 100000))
           ;; (let len (* i 100))
           (let ttime 0)
           (for (k 0 iters)
                ;; TODO: make these vectors of length len
                (let X (make-vector 1000))
                (let Y (make-vector 1000))
                (for (j 0 len)
                     (vector-set! X j 1)
                     (vector-set! Y j 1))
                (let start (nanotime))
                (let dot (reduce + (kernel ((x X) (y Y))
                                     (* x y))))
                (let stop (nanotime))
                (set! ttime (+ ttime (- stop start)))
                (assert (= dot len)))
           (print_int_u64 len ttime))
      (return 0)))

;; (module
;;   (fn main ()
;;       (let iters 10)
;;       (for (i 1 101)
;;            (let len (* i 100000))
;;            (let ttime 0)
;;            (for (k 0 iters)
;;                 ;; TODO: make these vectors of length len
;;                 (let X (make-vector len))
;;                 (let Y (make-vector len))
;;                 (for (j 0 len)
;;                      (vector-set! X j 1)
;;                      (vector-set! Y j 1))
;;                 (let start (time))
;;                 (let dot (reduce + (kernel ((x X) (y Y))
;;                                      (* x y))))
;;                 (let stop (time))
;;                 (set! ttime (+ ttime (- stop start)))
;;                 (assert (= dot len)))
;;            (print len ttime))
;;       (return 0)))
