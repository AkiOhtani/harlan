;; -*- scheme -*-
;; xfail
;; Dense dot product between two vectors.

(module
  (extern nanotime () -> u64)

  (fn main ()
      (let iters 1)
      (for (i 1 101)
           (let len (* (var i) 100000))
           ;; (let len (* (var i) 100))
           (let ttime 0)
           (for (k 0 (var iters))
                ;; TODO: make these vectors of length len
                (let X (make-vector (var len)))
                (let Y (make-vector (var len)))
                (for (j 0 (var len))
                     (vector-set! (var X) (var j) 1)
                     (vector-set! (var Y) (var j) 1))
                (let start (time))
                (let dot (reduce + (kernel ((x (var X)) (y (var Y)))
                                     (* (var x) (var y)))))
                (let stop (time))
                (set! (var ttime) (+ (var ttime) (- (var stop) (var start))))
                (assert (= (var dot) (var len))))
           (print (var len) (var ttime)))
      (return 0)))

;; (module
;;   (fn main ()
;;       (let iters 10)
;;       (for (i 1 101)
;;            (let len (* (var i) 100000))
;;            (let ttime 0)
;;            (for (k 0 (var iters))
;;                 ;; TODO: make these vectors of length len
;;                 (let X (make-vector (var len)))
;;                 (let Y (make-vector (var len)))
;;                 (for (j 0 (var len))
;;                      (vector-set! (var X) (var j) 1)
;;                      (vector-set! (var Y) (var j) 1))
;;                 (let start (time))
;;                 (let dot (reduce + (kernel ((x (var X)) (y (var Y)))
;;                                      (* (var x) (var y)))))
;;                 (let stop (time))
;;                 (set! (var ttime) (+ (var ttime) (- (var stop) (var start))))
;;                 (assert (= (var dot) (var len))))
;;            (print (var len) (var ttime)))
;;       (return 0)))
