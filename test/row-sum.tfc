;; -*- scheme -*-
;; xfail

;; This test shows that we can use reductions inside kernels.

(module
  (fn main () (() -> int)
      (let X1 (vector int) (vector (int 1)))
      (let X2 (vector int) (vector (int 1) (int 1)))
      (let X3 (vector int) (vector (int 1) (int 1) (int 1)))
      (let X4 (vector int) (vector (int 1) (int 1) (int 1) (int 1)))
      (let X (vector (vector int))
        (vector (var X1)
                (var X2)
                (var X3)
                (var X4)))
      (let Y (vector int) (vector (int 0) (int 0) (int 0) (int 0)))
      (kernel (((x (vector int)) (X (vector (vector int))))
               ((y int) (Y (vector int))))
              (let t int (reduce int + (var x)))
              (set! (var y) (var t)))
      (assert (= (vector-ref (var Y) (int 0)) (int 1)))
      (assert (= (vector-ref (var Y) (int 1)) (int 2)))
      (assert (= (vector-ref (var Y) (int 2)) (int 3)))
      (assert (= (vector-ref (var Y) (int 3)) (int 4)))
      (return (int 0))))
