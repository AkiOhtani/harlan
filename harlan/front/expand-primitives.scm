(library
  (harlan front expand-primitives)
  (export expand-primitives)
  (import
   (rnrs)
   (elegant-weapons helpers))

  (define-match expand-primitives
    ((module ,[Decl -> decl*] ...)
     `(module ,decl* ...)))
    
  (define-match Decl
    ((fn ,name ,args ,t ,[Stmt -> stmt])
     `(fn ,name ,args ,t ,stmt))
    ((extern ,name ,args -> ,rtype)
     `(extern ,name ,args -> ,rtype)))

  (define-match Stmt
    ((let ((,x* ,[Expr -> e*]) ...) ,[body])
     `(let ((,x* ,e*) ...) ,body))
    ((set! ,[Expr -> lhs] ,[Expr -> rhs])
     `(set! ,lhs ,rhs))
    ((vector-set! ,t ,[Expr -> v] ,[Expr -> i] ,[Expr -> e])
     `(vector-set! ,t ,v ,i ,e))
    ((if ,[Expr -> test] ,[conseq] ,[altern])
     `(if ,test ,conseq ,altern))
    ((if ,[Expr -> test] ,[conseq])
     `(if ,test ,conseq))
    ((while ,[Expr -> test] ,[body])
     `(while ,test ,body))
    ((for (,x ,[Expr -> start] ,[Expr -> stop]) ,[body])
     `(for (,x ,start ,stop) ,body))
    ((begin ,[stmt*] ...)
     `(begin . ,stmt*))
    ((print (vec (vec ,t ,n) ,m) ,[Expr -> e])
     (let ((v (gensym 'v)) (v-row (gensym 'vrow))
           (i (gensym 'i)) (j (gensym 'j)))
       `(let ((,v ,e))
          (for (,i (int 0) (length (var (vec (vec ,t ,n) ,m) ,v)))
            (let ((,v-row (vector-ref (vec ,t ,n)
                            (var (vec (vec ,t ,n) ,m) ,v)
                            (var int ,i))))
              (begin
                (print (str "[ "))
                (for (,j (int 0) (length (var (vec ,t ,n) ,v-row)))
                  (begin
                    (print (vector-ref
                             ,t (var (vec ,t ,n) ,v-row) (var int ,j)))
                    (print (str " "))))
                (print (str "]\n"))))))))
    ((print ,t ,[Expr -> e])
     `(print ,e))
    ((assert ,[Expr -> e])
     `(assert ,e))
    ((return) `(return))
    ((return ,[Expr -> e])
     `(return ,e))
    ((do ,[Expr -> e])
     `(do ,e)))

  (define-match Expr
    ((,t ,v) (guard (scalar-type? t)) `(,t ,v))
    ((var ,t ,x) `(var ,t ,x))
    ((int->float ,[e]) `(int->float ,e))
    ((iota ,[e]) `(iota ,e))
    ((vector ,t ,[e*] ...)
     `(vector ,t ,e* ...))
    ((make-vector ,t ,[e])
     `(make-vector ,t ,e))
    ((vector-ref ,t ,[v] ,[i])
     `(vector-ref ,t ,v ,i))
    ((length ,[e])
     `(length ,e))
    ((call ,[f] ,[args] ...)
     `(call ,f ,args ...))
    ((if ,[test] ,[conseq] ,[altern])
     `(if ,test ,conseq ,altern))
    ((if ,[test] ,[conseq])
     `(if ,test ,conseq))
    ((reduce ,t ,op ,[e])
     `(reduce ,t ,op ,e))
    ((kernel (vec ,inner-type ,n) (((,x ,t) (,[xs] ,ts)) ...) ,[body])
     `(kernel (vec ,inner-type ,n) (,n) (((,x ,t) (,xs ,ts) 0) ...) ,body))
    ((let ((,x* ,[e*]) ...) ,[e])
     `(let ((,x* ,e*) ...) ,e))
    ((begin ,[Stmt -> s*] ... ,[e])
     `(begin ,s* ... ,e))
    ((,op ,[lhs] ,[rhs])
     (guard (or (relop? op) (binop? op)))
     `(,op ,lhs ,rhs)))

  ;; end library
  )
