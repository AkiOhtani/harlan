(library
  (harlan middle compile-module)
  (export compile-module)
  (import (rnrs) (except (elegant-weapons helpers) ident?)
    (harlan helpers))

(define-match compile-module
  ((module ,[compile-decl -> decl*] ...)
   `((include "harlan.hpp") . ,decl*)))

(define-match compile-decl
  ((fn ,name ,args (,arg-types -> ,ret-type)
     ,[(compile-stmt #f) -> stmt])
   `(func ,ret-type ,name ,(map list args arg-types) ,stmt))
  ((extern ,name ,arg-types -> ,rtype)
   `(extern ,rtype ,name ,arg-types))
  ((global ,type ,name ,[(compile-expr #f) -> e])
   `(global ,type ,name ,e))
  ((typedef ,name ,t) `(typedef ,name ,t))
  ((gpu-module ,[compile-kernel -> kernel*] ...)
   `(gpu-module . ,kernel*)))

(define-match compile-kernel
  ((kernel ,name ,args ,[(compile-stmt #t) -> stmt])
   `(kernel ,name ,args ,stmt)))

(define-match (compile-stmt in-kernel?)
  ((begin ,[stmt*] ...)
   `(begin . ,stmt*))
  ((let ,x ,t ,[(compile-expr in-kernel?) -> e])
   `(let ,x ,t ,e))
  ((let ,x ,t)
   `(let ,x ,t))
  ((if ,[(compile-expr in-kernel?) -> test] ,[conseq])
   `(if ,test ,conseq))
  ((if ,[(compile-expr in-kernel?) -> test] ,[conseq] ,[alt])
   `(if ,test ,conseq ,alt))
  ((print ,[(compile-expr in-kernel?) -> expr] ...) `(print . ,expr))
  ((return) `(return))
  ((return ,[(compile-expr in-kernel?) -> expr]) `(return ,expr))
  ((assert ,[(compile-expr in-kernel?) -> expr]) `(do (assert ,expr)))
  ((set! ,[(compile-expr in-kernel?) -> x] ,[(compile-expr in-kernel?) -> e])
   `(set! ,x ,e))
  ((while ,[(compile-expr in-kernel?) -> expr] ,[stmt])
   `(while ,expr ,stmt))
  ((for (,i ,[(compile-expr in-kernel?) -> start]
            ,[(compile-expr in-kernel?) -> end]
            ,[(compile-expr in-kernel?) -> step])
     ,[stmt*] ...)
   `(for (,i ,start ,end ,step) . ,stmt*))
  ((error ,x) `(do (call (var harlan_error) (str ,(symbol->string x)))))
  ((do ,[(compile-expr in-kernel?) -> e]) `(do ,e)))

(define-match (compile-expr in-kernel?)
  ((,t ,n) (guard (scalar-type? t)) `(,t ,n))
  ((var ,t ,x) `(var ,x))
  ((c-expr ,t ,x) `(c-expr ,x))
  ((alloc ,[region] ,[size])
   (if in-kernel?
       `(call (c-expr alloc_in_region) ,region ,size)
       `(call (c-expr alloc_in_region) (addressof ,region) ,size)))
  ((region-ref ,t ,[region] ,[ptr])
   `(cast ,t (call (c-expr get_region_ptr) ,region ,ptr)))
  ((vector-ref ,t ,[v] ,[i]) `(vector-ref ,v ,i))
  ((if ,[test] ,[conseq] ,[alt])
   `(if ,test ,conseq ,alt))
  ((field (var ,t ,obj) ,x) `(field ,obj ,x))
  ((field (var ,t ,obj) ,x ,t) `(field ,obj ,x ,t))
  ((sizeof ,t) `(sizeof ,t))
  ((deref ,[e]) `(deref ,e))
  ((addressof ,[e]) `(addressof ,e))
  ((cast ,t ,[e]) `(cast ,t ,e))
  ((not ,[e]) `(not ,e))
  ((,op ,[e1] ,[e2])
   (guard (or (binop? op) (relop? op)))
   `(,op ,e1 ,e2))
  ((time) '(nanotime))
  ((call ,[f] ,[a*] ...) `(call ,f . ,a*)))

;; end library
)