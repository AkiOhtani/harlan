(library
  (harlan middle compile-module)
  (export compile-module)
  (import (rnrs) (elegant-weapons helpers)
    (harlan helpers))

(define-match compile-module
  ((module ,[compile-decl -> decl*] ...)
   `((include "harlan.hpp") . ,decl*)))

(define-match compile-decl
  ((fn ,name ,args (,arg-types -> ,ret-type)
     ,[compile-stmt -> stmt])
   `(func ,ret-type ,name ,(map list args arg-types) ,stmt))
  ((extern ,name ,arg-types -> ,rtype)
   `(extern ,rtype ,name ,arg-types))
  ((global ,type ,name ,[compile-expr -> e])
   `(global ,type ,name ,e))
  ((gpu-module ,[compile-kernel -> kernel*] ...)
   `(gpu-module . ,kernel*)))

(define-match compile-kernel
  ((kernel ,name ,args ,[compile-stmt -> stmt])
   `(kernel ,name ,args ,stmt)))

(define-match compile-stmt
  ((begin ,[stmt*] ...)
   `(begin . ,stmt*))
  ((let ,x ,t ,[compile-expr -> e])
   `(let ,x ,t ,e))
  ((if ,[compile-expr -> test] ,[conseq])
   `(if ,test ,conseq))
  ((if ,[compile-expr -> test] ,[conseq] ,[alt])
   `(if ,test ,conseq ,alt))
  ((print ,[compile-expr -> expr] ...) `(print . ,expr))
  ((return) `(return))
  ((return ,[compile-expr -> expr]) `(return ,expr))
  ((assert ,[compile-expr -> expr]) `(do (assert ,expr)))
  ((set! ,[compile-expr -> x] ,[compile-expr -> e])
   `(set! ,x ,e))
  ((vector-set! ,v ,i ,[compile-expr -> expr])
   `(vector-set! ,v ,i ,expr))
  ((while ,[compile-expr -> expr] ,[stmt])
   `(while ,expr ,stmt))
  ((for (,i ,[compile-expr -> start] ,[compile-expr -> end]
          ,[compile-expr -> step])
     ,[stmt*] ...)
   `(for (,i ,start ,end ,step) . ,stmt*))
  ((do ,[compile-expr -> e]) `(do ,e)))

(define-match compile-expr
  ((,t ,n) (guard (scalar-type? t)) `(,t ,n))
  ((var ,t ,x) `(var ,x))
  ((c-expr ,t ,x) `(c-expr ,x))
  ((alloc ,[region] ,[size])
   `(alloc ,region ,size))
  ((region-ref ,t ,[region] ,[ptr])
   `(region-ref ,t ,region ,ptr))
  ((vector-ref ,t ,[v] ,[i]) `(vector-ref ,v ,i))
  ((if ,[test] ,[conseq] ,[alt])
   `(if ,test ,conseq ,alt))
  ((field (var ,t ,obj) ,x) `(field ,obj ,x))
  ((field (var ,t ,obj) ,x ,t) `(field ,obj ,x ,t))
  ((sizeof ,t) `(sizeof ,t))
  ((deref ,[e]) `(deref ,e))
  ((addressof ,[e]) `(addressof ,e))
  ((cast ,t ,[e]) `(cast ,t ,e))
  ((,op ,[e1] ,[e2])
   (guard (or (binop? op) (relop? op)))
   `(,op ,e1 ,e2))
  ((time) '(nanotime))
  ((call ,[f] ,[a*] ...) `(call ,f . ,a*)))

;; end library
)