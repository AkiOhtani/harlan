;; This is the core module. It is loaded into every Harlan program.

(module

  (extern open_outfile (str) -> (ptr ofstream))
  (extern close_outfile ((ptr ofstream)) -> void)

  (define-macro cond (else)
    ((_ (else body))
     body)
    ((_ (test body))
     (if test body))
    ((_ (test body) rest ...)
     (if test body (cond rest ...))))

  (define-macro let* ()
    ((_ () b ...) (begin b ...))
    ((_ ((x e) (x* e*) ...) b ...)
     (let ((x e))
       (let* ((x* e*) ...) b ...))))
  
  (define (write-pgm file data)
    (let ((stream (open_outfile file))
          (rows (length data))
          (cols (length (vector-ref data 0))))
      (print "P2\n" stream)
      (print rows stream)
      (print " " stream)
      (print cols stream)
      (print "\n" stream)
      (print "255\n" stream)
      (for (i 0 rows 1)
        (for (j 0 cols 1)
          (let ((p (vector-ref (vector-ref data i) j)))
            (print (cond
                     ((< p 0)   0)
                     ((> p 255) 255)
                     (else p))
                   stream)
            (print " " stream))))
      (close_outfile stream)))

  (define-macro reduce (kernel)
    ;; This first one fuses reduce of a kernel.
    ((_ op (kernel ((x e) (x* e*) ...) b))
     (let ((x e) (x* e*) ...)
       (let ((t (let ((x (vector-ref x 0))
                      (x* (vector-ref x* 0)) ...)
                  b)))
         (for (reduce-index 0 (length x))
              (set! t (op t (let ((x (vector-ref x reduce-index))
                                  (x* (vector-ref x* reduce-index)) ...)
                              b))))
         t)))
    ((_ op e)
     (let ((x e))
       (let ((t (vector-ref x 0)))
         (for (i 1 (length x))
           (set! t (op t (vector-ref x i))))
         t))))
  )
